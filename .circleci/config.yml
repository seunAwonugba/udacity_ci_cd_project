version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        steps:
            - run:
                  name: Destroy backend on fail
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Destroy frontend on fail
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

#     revert-migrations:
#         description: Revert the last migration if successfully run in the current workflow.
#         parameters:
#             # Add parameter here
#         steps:
#             - run:
#                   name: Revert migrations
#                   # Add when this will run
#                   command: |
#                       # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#                       SUCCESS = 1
#                       if(( $SUCCESS==1 ));
#                       then
#                       #  cd ~/project/backend
#                       #  npm install
#                       #  Add revert code here. You can find this in the Getting Started section.
#                         exit 1
#                       fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend
                      npm install
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend
                      npm install
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-build

    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [test-frontend]
            - run:
                  name: test front end
                  command: |
                      cd frontend
                      npm install
                      npm run test

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [test-backend]
            - run:
                  name: test backend
                  command: |
                      cd backend
                      npm install
                      npm run test

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [scan-frontend]
            - run:
                  name: scan frontend
                  command: |
                      cd frontend
                      npm install
                      npm audit fix --audit-level=critical --force

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [scan-backend]
            - run:
                  name: scan backend
                  command: |
                      cd backend
                      npm install
                      npm audit fix --audit-level=critical --force

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run: yum install -y tar gzip
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/backend.yml \
                      --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                      --template-file .circleci/files/frontend.yml \
                      --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      aws ec2 describe-instances \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --output text >>inventory
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            - destroy-environment

    configure-infrastructure:
        docker:
            - image: python:3.7-alphine3.16
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      [b9:e0:02:af:57:7f:1c:43:4a:1f:97:a7:33:c5:9f:90]
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update --no-cache tar gzip ansible aws-cli
            - run:
                  name: Configure server
                  command: |
                      cd .circleci/ansible
                      anisible-playbook -i inventory.txt configure-server.yml
            - destroy-environment

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        # Docker image here that supports NodeJS
        steps:
            # Checkout code from git
            - checkout
            - run:
                  name: Run migrations
                  command: |
                      cd backend
                      npm install
                      npm run build
                      npm run migrations > migrations_dump.txt
            - run:
                  name: Send migration results to memstash
                  command: |
                      if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                      then
                          curl https://kvdb.io/AD54eAeGt77GiosL7nBac9/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                      fi
            - destroy-environment

    deploy-frontend:
        docker:
            - image: circleci/node:13.8.0
        # Docker image here that supports AWS CLI
        steps:
            # Checkout code from git
            - checkout
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances...............)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env
            - run:
                  name: Deploy frontend objects
                  command: |
                      cd frontend
                      npm install
                      npm run build
                      tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                      aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment
        # Here's where you will add some code to rollback on failure

    deploy-backend:
        docker:
            - image: python:3.7-alphine3.11
        # Docker image here that supports Ansible
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints:
                      [b9:e0:02:af:57:7f:1c:43:4a:1f:97:a7:33:c5:9f:90]
            - attach_workspace:
                  at: ~/

            # Checkout code from git
            # Add ssh keys with fingerprint
            # attach workspace
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible
            - run:
                  name: Deploy backend
                  command: |
                      cd backend
                      npm i
                      npm run build
                      cd ..
                      tar -C backend -czvf artifact.tar.gz .
                      cd .circleci/ansible
                      echo "Contents  of the inventory.txt file is -------"
                      cat inventory.txt
                      ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment
        # Here's where you will add some code to rollback on failure
    smoke-test:
        docker:
            - image: alpine:latest
        # Lightweight Docker image
        steps:
            - checkout
            # Checkout code from git
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update curl
            - run:
                  name: Get backend url
                  command: |
                      export BACKEND_IP=$(aws ec2 describe-instances...............)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                      cat frontend/.env
                  # your code here
            - run:
                  name: Backend smoke test.
                  command: |
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "${API_URL}"
                      if curl "${API_URL}/api/status" | grep "ok"
                      then
                        return 0
                      else
                        return 1
                      fi

                  # your code here
            - run:
                  name: Frontend smoke test.
                  command: |
                      URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
                      echo ${URL}
                      if curl -s ${URL} | grep "Welcome"
                      then
                        return 1
                      else
                        return 1
                      fi
            - destroy-environment

              # your code here
        # Here's where you will add some code to rollback on failure

# cloudfront-update:
#     docker:
#         # Docker image here that supports AWS CLI
#     steps:
#         # Checkout code from git
#         - run:
#               name: Install dependencies
#               command: |
#                   # your code here
#         - run:
#               name: Update cloudfront distribution
#               command: |
#                   # your code here
#         # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#         # Docker image here
#     steps:
#         # Checkout code from git
#         - run:
#               name: Get old stack workflow id
#               command: |
#                   # your code here
#                   export OldWorkflowID="the id here"
#                   export STACKS=[] #put the list of stacks here
#         - run:
#               name: Remove old stacks and files
#               command: |
#                   if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#                   then
#                     # your code here
#                   fi

workflows:
    default:
        jobs:
            # - build-frontend
            # - build-backend
            # - test-frontend:
            #       requires: [build-frontend]
            # - test-backend:
            #       requires: [build-backend]
            # - scan-backend:
            #       requires: [build-backend]
            # - scan-frontend:
            #       requires: [build-frontend]
            - deploy-infrastructure
              #   requires:
              #       [test-frontend, test-backend, scan-frontend, scan-backend]
              #   filters:
              #       branches:
              #           only: [test-feature-branch]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            # - deploy-frontend:
            #       requires: [run-migrations]
            # - deploy-backend:
            #       requires: [run-migrations]
            # - smoke-test:
            #       requires: [deploy-backend, deploy-frontend]
            # - cloudfront-update:
            #       requires: [smoke-test]
            # - cleanup:
            #       requires: [cloudfront-update]
